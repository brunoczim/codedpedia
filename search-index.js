var searchIndex = JSON.parse('{\
"codedpedia":{"doc":"This tool allows you to generate static sites in …","t":"OOAOOAOAAAFCIICQAAAAADDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLAALLLLLAALLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDMLLLLLLLLLLLLLLLLLLLLMLLMMLLLLLLLLLLLLLLLLDDDDDDDMLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDLLLLLLLLLLLLALALLLLDMLLLLLLLLLLLMLLLLLLLLDDDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLDDMMMLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLDDMLLLLMLLLLLLLLLLLLLLLLLLMLLLLLLLMLLLLLLLLIQQAKEDINQNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDNDNNDDDDEENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGGIQICCIDDICLLLLLLLLKLLLLLLLLALLLLLLLALLLKLLALLLLLLLLLLLLKLDLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLINDDNNEENQNNDKLLLLLLLLLLLLLMLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLMLLLLLLLLLLLLLLLLLLLLLLL","n":["Coproduct","HArray","component","harray","hiter","hseq","hvec","location","render","site","static_site_main","BlockComponent","Component","ComponentKind","InlineComponent","Kind","asset","block","inline","page","section","AssetComponent","Script","Stylesheet","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","cmp","cmp","cmp","default","default","default","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","hash","hash","hash","into","into","into","location","location","partial_cmp","partial_cmp","partial_cmp","render","render","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","BlockComponent","InlineBlock","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","hash","hash","into","into","list","media","partial_cmp","partial_cmp","render","render","render","table","text","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","OrderedList","UnorderedList","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","hash","hash","into","into","partial_cmp","partial_cmp","render","render","render","render","render","render","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Figure","Image","alt","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","equivalent","equivalent","fmt","fmt","from","from","hash","hash","image","into","into","legend","location","partial_cmp","partial_cmp","render","render","render","render","render","render","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CaptionedTable","Cell","CellAttrs","CellComponent","Row","RowComponent","Table","attrs","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","caption","child","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","colspan","default","default","default","default","default","default","default","eq","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","hash","hash","header","into","into","into","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","render","render","render","render","render","render","render","render","render","render","render","render","rowspan","table","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","Bold","Italic","Paragraph","Preformatted","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","into","into","into","into","partial_cmp","partial_cmp","partial_cmp","partial_cmp","render","render","render","render","render","render","render","render","render","render","render","render","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","InlineComponent","borrow","borrow_mut","clone","clone_into","cmp","default","eq","equivalent","fmt","from","hash","into","media","partial_cmp","text","to_owned","try_from","try_into","type_id","Audio","alt","borrow","borrow_mut","clone","clone_into","cmp","eq","equivalent","fmt","from","hash","into","location","partial_cmp","render","render","render","to_owned","try_from","try_into","type_id","Bold","Italic","Link","Preformatted","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","default","default","default","default","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","hash","hash","hash","hash","into","into","into","into","location","partial_cmp","partial_cmp","partial_cmp","partial_cmp","render","render","render","render","render","render","render","render","render","render","render","render","target","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","Page","PageComponent","assets","banner","body","borrow","borrow","borrow_mut","borrow_mut","children","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","hash","hash","into","into","partial_cmp","partial_cmp","render","render","render","title","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","Section","SectionComponent","body","borrow","borrow","borrow_mut","borrow_mut","children","clone","clone","clone_into","clone_into","cmp","cmp","default","default","eq","eq","equivalent","equivalent","fmt","fmt","from","from","hash","hash","id","into","into","partial_cmp","partial_cmp","render","render","render","title","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","IntoIterRef","Item","Iter","coproduct","iter","Cocons","Conil","Coproduct","Head","Meta","Tail","as_mut","as_mut","as_ref","as_ref","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","coerce","eq","eq","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","hash","hash","into","into","into_future","into_future","partial_cmp","partial_cmp","poll","poll","provide","provide","render","render","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Fragment","Fragment","Id","Id","Internal","InternalLoc","InternalPath","InvalidFragment","InvalidId","InvalidInternalLoc","Location","Url","access","access","access","access","append","as_str","as_str","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","default","default","default","dir_depth","eq","eq","eq","eq","eq","eq_index","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fragments","from","from","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","hash","id","internal","into","into","into","into","into","into","into","into","is_root","new","new","parse","parse","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","path","provide","provide","provide","render","render","render","render","render","render","render","render","render","render","root","to_fs_path","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","url","Context","DynFullComponent","DynFullComponentUnsync","Format","Format","FullRender","Html","Markdown","Render","RenderAsDisplay","Renderer","Scope","Text","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","enter","enter_section","fmt","fmt","fmt","fmt","from","from","from","html","into","into","into","into_dyn","into_dyn_unsync","kind","location","markdown","new","new","new","render","scoped","section_level","text","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_kind","write_str","write_str","Html","borrow","borrow_mut","clone","clone_into","default","eq","equivalent","fmt","from","into","to_owned","try_from","try_into","type_id","write_str","Markdown","Nest","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","enter","eq","equivalent","fmt","fmt","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_str","Nest","Text","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","enter","eq","equivalent","fmt","fmt","from","from","into","into","new","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","write_str","Accessor","AlreadyExists","BuildError","Directory","Directory","EmptyPath","Entry","InsertPathError","NonDirEntry","Output","Page","Resource","Site","access","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","by_mut","by_ref","cause","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","default","default","default","entries","eq","eq","eq","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get","get_mut","insert_index","insert_path","into","into","into","into","into","is_directory","is_page","is_resource","path","provide","provide","root","to_owned","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_insert_index","try_insert_path","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":[[0,"codedpedia"],[11,"codedpedia::component"],[21,"codedpedia::component::asset"],[79,"codedpedia::component::block"],[122,"codedpedia::component::block::list"],[164,"codedpedia::component::block::media"],[208,"codedpedia::component::block::table"],[355,"codedpedia::component::block::text"],[439,"codedpedia::component::inline"],[459,"codedpedia::component::inline::media"],[481,"codedpedia::component::inline::text"],[567,"codedpedia::component::page"],[611,"codedpedia::component::section"],[654,"codedpedia::hseq"],[659,"codedpedia::hseq::coproduct"],[714,"codedpedia::location"],[896,"codedpedia::render"],[956,"codedpedia::render::html"],[972,"codedpedia::render::markdown"],[1002,"codedpedia::render::text"],[1032,"codedpedia::site"]],"d":["Defines a corpoduct type, i.e. an arbitrary enum.","Expands to the type of an heterogenous array.","This module exports the component trait and components …","Constructs an “heterogenous array”, i.e. constructed …","Constructs an “heterogenous iterator”, i.e. …","This module exports utilities to create heterogenous …","Constructs an “heterogenous vector”, i.e. constructed …","This module provides location, paths, Urls.","This module exports items related to rendering components.","This module provides a “filesystem-like” utility for …","Main function of a static site targetting one format. A …","","A component’s base trait. A component is a piece of data …","A component kind is a way of “typing” (i.e. give …","","The kind, i.e. the “type”, of this component.","This module exports page assets components.","This module exports components that are of type block, as …","This module exports components that are of type inline, as …","This module exports page component related utilities.","This module exports section components-related utilites.","The kind of an asset component. Such component is an …","JavaScript script asset.","Stylesheet asset.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Location to the stylesheet.","Location to the script.","","","","","","","","","","","","","","","","","","A block component. Such component is one that cannot …","Wrapper over inline components to make them a block …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This module exports list related components.","This module exports block media components.","","","","","","This module exports a table component.","This module exports block text components.","","","","","","","","","An ordered list (typically displayed with item numbers). …","An unordered list (typically displayed with bullets). The …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","A figure component, an image with legend.","An image component.","Alternative text describing the image.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","The targetted image.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Legend of the image.","Where the image is.","","","","","","","","","","","","","","","","","A table with a title/caption at the top.","A table cell, that can be a header, and can span over …","Attributes of a table cell.","Cell component kind. Components of this kind are usable as …","A row in a table. The single unnamed field could be an …","Row component kind. Components of this kind are usable as …","A table. The single unnamed field could be an array, a …","Cell attributes, such as span and declaring it as header …","","","","","","","","","","","","","","","The caption of this table.","Child component displayed in the cell.","","","","","","","","","","","","","","","","","","","","","","Span size in the column direction of this cell.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","","Is this cell a header?","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Span size in the row direction of this cell.","The table itself.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","This components wraps another component and its text bold.","This components wraps another component and its text …","Component that takes a portion of inline components and …","This components wraps another component and its text …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An inline component. Such component is one that can appear …","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","This module defines media that can be inlined in the text.","","This module exports inline text components.","","","","","A playable audio.","Alternative text description of the audio.","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Where the audio file is.","","","","","","","","","This components wraps another component and its text bold.","This components wraps another component and its text …","This component is embeds a link to another resource in a …","This components wraps another component and its text …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The embedded link.","","","","","","","","","","","","","","","","","Target displayed component.","","","","","","","","","","","","","","","","","The page: the outermost component in an article/page.","The kind of page components. A page component is the …","List of asset components. Can be an array, a vector, or …","Banner placed above everything in the page.","The body of the page.","","","","","Child sections of the page. Can be an array, a vector, or …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Title of the page/article.","","","","","","","","","A page/article section.","The kind of section-type components. A section component …","Body of the section.","","","","","List of child sections, can be an array, a vector, or …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","ID used to reference it.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Title of the section.","","","","","","","","","A trait to make trait bounds more ergnomic relating to …","Item of the iterator.","Type of the iterator.","Coproduct: an arbitrary enum, or if will, an …","Converts the reference into an iterator.","Cons is a node in a list. Cocons is the dual of the cons. …","Nil is the empty list. Conil is the dual of the empty …","Types coproducts.","Head of the coproduct (i.e. first element in the …","The meta-type of this coproduct.","Tail of the coproduct (i.e. not the first element in the …","","","","","","","","","","","","","","","Coerces this coproduct into any type since it is …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","A fragment of a path, that is, a piece, an element of it.","The fragment part is invalid.","An ID of a location.","The ID part is invalid.","An internal location.","A location to an internal page, with optional ID. Always …","An internal path, without any ID. Always absolute (with …","Error when an invalid fragment (piece of a path) string is …","Error when an invalid ID string is given to be parsed.","Error yielded when an internal location was attempted to …","A location of a page, either internal or external.","An external page (or an internal page encoded as an …","","","","","Appends a fragment (a piece) to the end of this path. …","The string contents of this ID.","The string contents of this fragment.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Counts the directory depth.","","","","","","Compares two locations taking “index” into account and …","","","","","","","","","","","","","","","","","","","","","Fragments of the path (i.e. each piece, each element).","","Returns the argument unchanged.","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","ID of the section or specific object inside of the …","Parses an internal location but returns a generic location.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Tests if this path leads to the root.","Creates an ID from the desired string contents. The string …","Creates a fragment from the desired string contents. The …","Parser the internal path. Fragments separated by “/”.","Parses247     } an internal location. Path fragments …","","","","","","Path to the document.","","","","","","","","","","","","","","Path to the root of the encyclopedia.","Creates an OS path buffer.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Parses a URL and yields a location.","Context data of a session of rendering.","A dynamic trait object for thread-safe components with …","A dynamic trait object for thread-unsafe components with …","A rendering format: e.g. HTML, Markdown, etc.","Rendering format associated with this scope.","An auto-trait for components that implement rendering for …","","","General rendering trait. A component implements this trait …","A helper type that will render a component using Rust’s …","A proxy formatter for rendering using Rust’s formatting …","A scope of a render format. The scope allows a component …","","","","","","","","","","Enters this scope during the call of the given consumer …","Enters another section level, by incrementing it.","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","This module provides utilities about the HTML rendering …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Converts the fully renderable component into a trait …","Converts the fully renderable component into a trait …","Yields the component kind.","Yields the location of the page being rendered.","This module provides utilities about the markdown …","Creates a new renderer given a render format and a target …","Creates a context from page location and component kind.","Creates a new display rendering helper given a component, …","Renders the given component using two things:","Given a scope over the render format and a scope consumer, …","Yields the current nesting level of sections, starting …","This module provides utilities about the plaintext …","","","","","","","","","","","","Recreates the context but with another  component kind.","A proxy method for writes to a target formatter that is …","","HTML5 rendering format.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","The html-mixed markdown rendering format.","Nesting scope: advances indentation level every entering, …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new markdown format renderer given indentation …","","","","","","","","","","Nesting scope: advances indentation level every entering, …","The plaintext rendering format.","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Creates a new plaintext format renderer given indentation …","","","","","","","","","","An accessor over a directory.","Path already exists.","An error that may happen when building a site.","A site’s directory.","This entry is a directory with more entries.","Empty path given, which is not accepted since it would be …","An entry at a directory. Parametrized so pages and …","Error that may happen when inserting a path into a …","A non-directory sub-segment was found.","The output value of such access.","This entry is a page to be rendered.","This entry is an external resource.","A site’s filesystem.","Access an entry of the directory.","","","","","","","","","","","Builds the site into a concrete filesystem, given a render …","Replaces this entry’s data by mutable references to them.","Replaces this entry’s data by references to them.","IO error that caused the build error.","","","","","","","","","","","","Entries of the directory, mapped by a name (i.e. a …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Gets an entry from the directory given an accessor.","Mutabily gets an entry from the directory given an …","Inserts the given new entry at the given path, assuming it …","Inserts the given new entry at the given path. Path cannot …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Is this entry a directory?","Is this entry a page?","Is this entry a resource?","Path of the problematic file.","","","Root directory.","","","","","","","","","","","","Inserts the given new entry at the given path, assuming it …","Inserts the given new entry at the given path. Path cannot …","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0,0,0,0,0,0,0,0,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,7,8,9,8,9,7,8,9,8,9,7,8,9,7,8,9,7,8,9,7,8,9,0,0,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,21,24,0,0,21,24,24,24,24,0,0,21,24,21,24,21,24,21,24,0,0,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,35,34,34,34,35,35,35,34,35,34,35,34,35,34,35,0,0,36,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,36,37,37,36,37,37,36,36,37,36,36,36,37,37,37,36,37,36,37,36,37,36,37,0,0,0,0,0,0,0,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,40,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,43,38,39,40,41,42,43,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,44,44,38,39,40,41,42,43,44,43,38,39,40,41,42,43,44,38,39,40,41,42,43,44,38,38,38,39,39,39,40,40,40,44,44,44,43,40,38,39,40,41,42,43,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,38,39,40,41,42,43,44,0,0,0,0,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,46,46,46,47,47,47,48,48,48,49,49,49,46,47,48,49,46,47,48,49,46,47,48,49,46,47,48,49,0,50,50,50,50,50,50,50,50,50,50,50,50,0,50,0,50,50,50,50,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,0,0,0,0,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,55,52,53,54,55,52,52,52,53,53,53,54,54,54,55,55,55,55,52,53,54,55,52,53,54,55,52,53,54,55,52,53,54,55,0,0,56,56,56,56,57,56,57,56,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,57,56,56,56,56,56,57,56,57,56,57,56,57,0,0,58,58,59,58,59,58,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,59,58,58,59,58,59,58,58,58,58,58,59,58,59,58,59,58,59,0,33,33,0,33,0,0,0,62,100,62,60,62,60,62,60,62,60,62,60,62,60,62,60,62,60,60,62,60,62,60,60,62,62,60,62,60,62,60,62,60,62,60,62,60,62,60,62,60,62,60,62,60,62,60,62,60,62,60,62,0,78,0,78,77,0,0,0,0,0,0,77,72,72,74,74,72,75,74,77,72,78,79,80,75,81,74,77,72,78,79,80,75,81,74,77,72,78,79,80,75,81,74,77,72,78,79,80,75,81,74,77,72,79,75,74,77,72,79,72,77,72,79,75,74,72,77,72,79,75,74,77,72,72,78,78,79,79,80,80,75,75,81,81,74,74,72,77,77,77,77,72,78,78,78,79,79,80,75,81,74,77,72,79,75,74,79,77,77,72,78,79,80,75,81,74,72,75,74,72,79,77,72,79,75,74,79,78,80,81,77,77,77,72,72,72,79,79,79,75,72,72,77,72,78,79,80,75,81,74,72,78,79,80,75,81,74,77,72,78,79,80,75,81,74,77,72,78,79,80,75,81,74,77,72,78,79,80,75,81,74,77,0,0,0,0,92,0,0,0,0,0,0,0,0,17,18,86,17,18,86,18,18,92,18,17,18,86,86,17,18,86,0,17,18,86,101,101,18,18,0,17,18,86,3,17,18,0,18,86,17,18,86,17,18,86,17,18,86,18,1,17,0,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,31,94,31,94,31,94,31,94,31,94,31,31,31,94,31,94,31,94,31,31,94,31,94,31,94,31,94,31,0,0,32,95,32,95,32,95,32,95,32,95,32,32,32,95,32,95,32,95,32,32,95,32,95,32,95,32,95,32,0,98,0,0,97,98,0,0,98,99,97,97,0,99,96,98,4,73,97,96,98,4,73,97,4,97,97,96,98,4,73,97,98,4,73,97,4,73,97,73,4,73,97,4,73,97,96,96,98,98,4,73,97,96,98,4,73,97,73,73,73,73,96,98,4,73,97,97,97,97,96,96,98,4,98,4,73,97,96,98,96,98,4,73,97,73,73,96,98,4,73,97,96,98,4,73,97],"f":[0,0,0,0,0,0,0,0,0,0,[[[4,[[3,[[0,[1,2]]]]]],[0,[1,2]],[6,[5]],[6,[5]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[7,7],[8,8],[9,9],[[]],[[]],[[]],[[7,7],10],[[8,8],10],[[9,9],10],[[],7],[[],8],[[],9],[[7,7],11],[[8,8],11],[[9,9],11],[[],11],[[],11],[[],11],[[7,12],13],[[8,12],13],[[9,12],13],[[]],[[]],[[]],[[7,14]],[[8,14]],[[9,14]],[[]],[[]],[[]],0,0,[[7,7],[[15,[10]]]],[[8,8],[[15,[10]]]],[[9,9],[[15,[10]]]],[[8,[17,[16]],18],13],[[9,[17,[16]],18],13],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],0,0,[[]],[[]],[[]],[[]],[21,21],[[[24,[[0,[22,23]]]]],[[24,[[0,[22,23]]]]]],[[]],[[]],[[21,21],10],[[[24,[[0,[22,25]]]],[24,[[0,[22,25]]]]],10],[[],21],[[],[[24,[[0,[22,26]]]]]],[[21,21],11],[[[24,[[0,[22,27]]]],[24,[[0,[22,27]]]]],11],[[],11],[[],11],[[21,12],13],[[[24,[[0,[22,28]]]],12],13],[[]],[[]],[[21,14]],[[[24,[[0,[22,29]]]],14]],[[]],[[]],0,0,[[21,21],[[15,[10]]]],[[[24,[[0,[22,30]]]],[24,[[0,[22,30]]]]],[[15,[10]]]],[[[24,[[3,[16]]]],[17,[16]],18],13],[[[24,[[3,[31]]]],[17,[31]],18],13],[[[24,[[3,[32]]]],[17,[32]],18],13],0,0,[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],0,0,[[]],[[]],[[]],[[]],[[[34,[[0,[33,23]]]]],[[34,[[0,[33,23]]]]]],[[[35,[[0,[33,23]]]]],[[35,[[0,[33,23]]]]]],[[]],[[]],[[[34,[33]],[34,[33]]],10],[[[35,[33]],[35,[33]]],10],[[],[[34,[[0,[33,26]]]]]],[[],[[35,[[0,[33,26]]]]]],[[[34,[33]],[34,[33]]],11],[[[35,[33]],[35,[33]]],11],[[],11],[[],11],[[[34,[33]],12],13],[[[35,[33]],12],13],[[]],[[]],[[[34,[33]],14]],[[[35,[33]],14]],[[]],[[]],[[[34,[33]],[34,[33]]],[[15,[10]]]],[[[35,[33]],[35,[33]]],[[15,[10]]]],[[[34,[33]],[17,[31]],18],13],[[[34,[33]],[17,[32]],18],13],[[[34,[33]],[17,[16]],18],13],[[[35,[33]],[17,[32]],18],13],[[[35,[33]],[17,[31]],18],13],[[[35,[33]],[17,[16]],18],13],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],0,0,0,[[]],[[]],[[]],[[]],[36,36],[[[37,[[0,[22,23]]]]],[[37,[[0,[22,23]]]]]],[[]],[[]],[[36,36],10],[[[37,[[0,[22,25]]]],[37,[[0,[22,25]]]]],10],[[36,36],11],[[[37,[[0,[22,27]]]],[37,[[0,[22,27]]]]],11],[[],11],[[],11],[[36,12],13],[[[37,[[0,[22,28]]]],12],13],[[]],[[]],[[36,14]],[[[37,[[0,[22,29]]]],14]],0,[[]],[[]],0,0,[[36,36],[[15,[10]]]],[[[37,[[0,[22,30]]]],[37,[[0,[22,30]]]]],[[15,[10]]]],[[36,[17,[32]],18],13],[[36,[17,[16]],18],13],[[36,[17,[31]],18],13],[[[37,[[3,[16]]]],[17,[16]],18],13],[[[37,[[3,[31]]]],[17,[31]],18],13],[[[37,[[3,[32]]]],[17,[32]],18],13],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[[38,[[0,[33,23]]]]],[[38,[[0,[33,23]]]]]],[[[39,[[0,[33,23]]]]],[[39,[[0,[33,23]]]]]],[[[40,[[0,[22,23]],[0,[33,23]]]]],[[40,[[0,[22,23]],[0,[33,23]]]]]],[41,41],[42,42],[43,43],[[[44,[[0,[22,23]]]]],[[44,[[0,[22,23]]]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[33]],[38,[33]]],10],[[[39,[33]],[39,[33]]],10],[[[40,[[0,[22,25]],33]],[40,[[0,[22,25]],33]]],10],[[41,41],10],[[42,42],10],[[43,43],10],[[[44,[[0,[22,25]]]],[44,[[0,[22,25]]]]],10],0,[[],[[38,[[0,[33,26]]]]]],[[],[[39,[[0,[33,26]]]]]],[[],[[40,[[0,[22,26]],[0,[33,26]]]]]],[[],41],[[],42],[[],43],[[],[[44,[[0,[22,26]]]]]],[[[38,[33]],[38,[33]]],11],[[[39,[33]],[39,[33]]],11],[[[40,[[0,[22,27]],33]],[40,[[0,[22,27]],33]]],11],[[41,41],11],[[42,42],11],[[43,43],11],[[[44,[[0,[22,27]]]],[44,[[0,[22,27]]]]],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[[38,[33]],12],13],[[[39,[33]],12],13],[[[40,[22,33]],12],13],[[41,12],13],[[42,12],13],[[43,12],13],[[[44,[[0,[22,28]]]],12],13],[[]],[[]],[[]],[[]],[[]],[[]],[22,[[44,[22]]]],[[]],[45],[[[38,[33]],14]],[[[39,[33]],14]],[[[40,[[0,[22,29]],33]],14]],[[41,14]],[[42,14]],[[43,14]],[[[44,[[0,[22,29]]]],14]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[38,[33]],[38,[33]]],[[15,[10]]]],[[[39,[33]],[39,[33]]],[[15,[10]]]],[[[40,[[0,[22,30]],33]],[40,[[0,[22,30]],33]]],[[15,[10]]]],[[41,41],[[15,[10]]]],[[42,42],[[15,[10]]]],[[43,43],[[15,[10]]]],[[[44,[[0,[22,30]]]],[44,[[0,[22,30]]]]],[[15,[10]]]],[[[38,[33]],[17,[31]],18],13],[[[38,[33]],[17,[16]],18],13],[[[38,[33]],[17,[32]],18],13],[[[39,[33]],[17,[16]],18],13],[[[39,[33]],[17,[32]],18],13],[[[39,[33]],[17,[31]],18],13],[[[40,[[3,[31]],33]],[17,[31]],18],13],[[[40,[[3,[32]],33]],[17,[32]],18],13],[[[40,[[3,[16]],33]],[17,[16]],18],13],[[[44,[[3,[32]]]],[17,[32]],18],13],[[[44,[[3,[31]]]],[17,[31]],18],13],[[[44,[[3,[16]]]],[17,[16]],18],13],0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[46,[[0,[22,23]]]]],[[46,[[0,[22,23]]]]]],[[[47,[[0,[22,23]]]]],[[47,[[0,[22,23]]]]]],[[[48,[[0,[22,23]]]]],[[48,[[0,[22,23]]]]]],[[[49,[[0,[22,23]]]]],[[49,[[0,[22,23]]]]]],[[]],[[]],[[]],[[]],[[[46,[[0,[22,25]]]],[46,[[0,[22,25]]]]],10],[[[47,[[0,[22,25]]]],[47,[[0,[22,25]]]]],10],[[[48,[[0,[22,25]]]],[48,[[0,[22,25]]]]],10],[[[49,[[0,[22,25]]]],[49,[[0,[22,25]]]]],10],[[],[[46,[[0,[22,26]]]]]],[[],[[47,[[0,[22,26]]]]]],[[],[[48,[[0,[22,26]]]]]],[[],[[49,[[0,[22,26]]]]]],[[[46,[[0,[22,27]]]],[46,[[0,[22,27]]]]],11],[[[47,[[0,[22,27]]]],[47,[[0,[22,27]]]]],11],[[[48,[[0,[22,27]]]],[48,[[0,[22,27]]]]],11],[[[49,[[0,[22,27]]]],[49,[[0,[22,27]]]]],11],[[],11],[[],11],[[],11],[[],11],[[[46,[[0,[22,28]]]],12],13],[[[47,[[0,[22,28]]]],12],13],[[[48,[[0,[22,28]]]],12],13],[[[49,[[0,[22,28]]]],12],13],[[]],[[]],[[]],[[]],[[[46,[[0,[22,29]]]],14]],[[[47,[[0,[22,29]]]],14]],[[[48,[[0,[22,29]]]],14]],[[[49,[[0,[22,29]]]],14]],[[]],[[]],[[]],[[]],[[[46,[[0,[22,30]]]],[46,[[0,[22,30]]]]],[[15,[10]]]],[[[47,[[0,[22,30]]]],[47,[[0,[22,30]]]]],[[15,[10]]]],[[[48,[[0,[22,30]]]],[48,[[0,[22,30]]]]],[[15,[10]]]],[[[49,[[0,[22,30]]]],[49,[[0,[22,30]]]]],[[15,[10]]]],[[[46,[[3,[16]]]],[17,[16]],18],13],[[[46,[[3,[32]]]],[17,[32]],18],13],[[[46,[[3,[31]]]],[17,[31]],18],13],[[[47,[[3,[31]]]],[17,[31]],18],13],[[[47,[[3,[32]]]],[17,[32]],18],13],[[[47,[[3,[16]]]],[17,[16]],18],13],[[[48,[[3,[16]]]],[17,[16]],18],13],[[[48,[[3,[32]]]],[17,[32]],18],13],[[[48,[[3,[31]]]],[17,[31]],18],13],[[[49,[[3,[32]]]],[17,[32]],18],13],[[[49,[[3,[16]]]],[17,[16]],18],13],[[[49,[[3,[31]]]],[17,[31]],18],13],[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],0,[[]],[[]],[50,50],[[]],[[50,50],10],[[],50],[[50,50],11],[[],11],[[50,12],13],[[]],[[50,14]],[[]],0,[[50,50],[[15,[10]]]],0,[[]],[[],19],[[],19],[[],20],0,0,[[]],[[]],[51,51],[[]],[[51,51],10],[[51,51],11],[[],11],[[51,12],13],[[]],[[51,14]],[[]],0,[[51,51],[[15,[10]]]],[[51,[17,[32]],18],13],[[51,[17,[31]],18],13],[[51,[17,[16]],18],13],[[]],[[],19],[[],19],[[],20],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[52,[[0,[22,23]]]]],[[52,[[0,[22,23]]]]]],[[[53,[[0,[22,23]]]]],[[53,[[0,[22,23]]]]]],[[[54,[[0,[22,23]]]]],[[54,[[0,[22,23]]]]]],[[[55,[[0,[22,23]]]]],[[55,[[0,[22,23]]]]]],[[]],[[]],[[]],[[]],[[[52,[[0,[22,25]]]],[52,[[0,[22,25]]]]],10],[[[53,[[0,[22,25]]]],[53,[[0,[22,25]]]]],10],[[[54,[[0,[22,25]]]],[54,[[0,[22,25]]]]],10],[[[55,[[0,[22,25]]]],[55,[[0,[22,25]]]]],10],[[],[[52,[[0,[22,26]]]]]],[[],[[53,[[0,[22,26]]]]]],[[],[[54,[[0,[22,26]]]]]],[[],[[55,[[0,[22,26]]]]]],[[[52,[[0,[22,27]]]],[52,[[0,[22,27]]]]],11],[[[53,[[0,[22,27]]]],[53,[[0,[22,27]]]]],11],[[[54,[[0,[22,27]]]],[54,[[0,[22,27]]]]],11],[[[55,[[0,[22,27]]]],[55,[[0,[22,27]]]]],11],[[],11],[[],11],[[],11],[[],11],[[[52,[[0,[22,28]]]],12],13],[[[53,[[0,[22,28]]]],12],13],[[[54,[[0,[22,28]]]],12],13],[[[55,[[0,[22,28]]]],12],13],[[]],[[]],[[]],[[]],[[[52,[[0,[22,29]]]],14]],[[[53,[[0,[22,29]]]],14]],[[[54,[[0,[22,29]]]],14]],[[[55,[[0,[22,29]]]],14]],[[]],[[]],[[]],[[]],0,[[[52,[[0,[22,30]]]],[52,[[0,[22,30]]]]],[[15,[10]]]],[[[53,[[0,[22,30]]]],[53,[[0,[22,30]]]]],[[15,[10]]]],[[[54,[[0,[22,30]]]],[54,[[0,[22,30]]]]],[[15,[10]]]],[[[55,[[0,[22,30]]]],[55,[[0,[22,30]]]]],[[15,[10]]]],[[[52,[[3,[16]]]],[17,[16]],18],13],[[[52,[[3,[32]]]],[17,[32]],18],13],[[[52,[[3,[31]]]],[17,[31]],18],13],[[[53,[[3,[32]]]],[17,[32]],18],13],[[[53,[[3,[16]]]],[17,[16]],18],13],[[[53,[[3,[31]]]],[17,[31]],18],13],[[[54,[[3,[16]]]],[17,[16]],18],13],[[[54,[[3,[32]]]],[17,[32]],18],13],[[[54,[[3,[31]]]],[17,[31]],18],13],[[[55,[[3,[31]]]],[17,[31]],18],13],[[[55,[[3,[16]]]],[17,[16]],18],13],[[[55,[[3,[32]]]],[17,[32]],18],13],0,[[]],[[]],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],0,0,0,0,0,[[]],[[]],[[]],[[]],0,[[[56,[[0,[22,23]],[0,[22,23]],[0,[22,23]],[0,[33,23]]]]],[[56,[[0,[22,23]],[0,[22,23]],[0,[22,23]],[0,[33,23]]]]]],[57,57],[[]],[[]],[[[56,[[0,[22,25]],[0,[22,25]],[0,[22,25]],33]],[56,[[0,[22,25]],[0,[22,25]],[0,[22,25]],33]]],10],[[57,57],10],[[],[[56,[[0,[22,26]],[0,[22,26]],[0,[22,26]],[0,[33,26]]]]]],[[],57],[[[56,[[0,[22,27]],[0,[22,27]],[0,[22,27]],33]],[56,[[0,[22,27]],[0,[22,27]],[0,[22,27]],33]]],11],[[57,57],11],[[],11],[[],11],[[[56,[22,22,22,33]],12],13],[[57,12],13],[[]],[[]],[[[56,[[0,[22,29]],[0,[22,29]],[0,[22,29]],33]],14]],[[57,14]],[[]],[[]],[[[56,[[0,[22,30]],[0,[22,30]],[0,[22,30]],33]],[56,[[0,[22,30]],[0,[22,30]],[0,[22,30]],33]]],[[15,[10]]]],[[57,57],[[15,[10]]]],[[[56,[[3,[16]],[3,[16]],[3,[16]],33]],[17,[16]],18],13],[[[56,[[3,[32]],22,[3,[32]],33]],[17,[32]],18],13],[[[56,[[3,[31]],22,[3,[31]],33]],[17,[31]],18],13],0,[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],0,0,0,[[]],[[]],[[]],[[]],0,[[[58,[[0,[22,23]],[0,[22,23]],[0,[33,23]]]]],[[58,[[0,[22,23]],[0,[22,23]],[0,[33,23]]]]]],[59,59],[[]],[[]],[[[58,[[0,[22,25]],[0,[22,25]],33]],[58,[[0,[22,25]],[0,[22,25]],33]]],10],[[59,59],10],[[],[[58,[[0,[22,26]],[0,[22,26]],[0,[33,26]]]]]],[[],59],[[[58,[[0,[22,27]],[0,[22,27]],33]],[58,[[0,[22,27]],[0,[22,27]],33]]],11],[[59,59],11],[[],11],[[],11],[[[58,[22,22,33]],12],13],[[59,12],13],[[]],[[]],[[[58,[[0,[22,29]],[0,[22,29]],33]],14]],[[59,14]],0,[[]],[[]],[[[58,[[0,[22,30]],[0,[22,30]],33]],[58,[[0,[22,30]],[0,[22,30]],33]]],[[15,[10]]]],[[59,59],[[15,[10]]]],[[[58,[[3,[32]],[3,[32]],33]],[17,[32]],18],13],[[[58,[[3,[31]],[3,[31]],33]],[17,[31]],18],13],[[[58,[[3,[16]],[3,[16]],33]],[17,[16]],18],13],0,[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],0,0,0,0,[[]],0,0,0,0,0,0,[60,2],[[[62,[[61,[2]],[61,[2]]]]],2],[[[60,[2]]]],[[[62,[[63,[2]],[63,[2]]]]],2],[[]],[[]],[[]],[[]],[[[60,[2]]],[[60,[2]]]],[[[62,[23,23]]],[[62,[23,23]]]],[[]],[[]],[[[60,[2]],[60,[2]]],10],[[[62,[25,25]],[62,[25,25]]],10],[[[60,[2]]]],[[[60,[2]],[60,[2]]],11],[[[62,[27,27]],[62,[27,27]]],11],[[],11],[[],11],[[[60,[2]],12],13],[[[60,[2]],12],13],[[[62,[28,28]],12],13],[[[62,[64,64]],12],13],[[]],[[]],[[[60,[2]],14]],[[[62,[29,29]],14]],[[]],[[]],[[]],[[]],[[[60,[2]],[60,[2]]],[[15,[10]]]],[[[62,[30,30]],[62,[30,30]]],[[15,[10]]]],[[[65,[[60,[2]]]],66],67],[[[65,[[62,[68,68]]]],66],67],[69],[69],[[[60,[70]],[17,[[0,[1,2]]]],18],13],[[[62,[[3,[[0,[1,2]]]],[3,[[0,[1,2]]]]]],[17,[[0,[1,2]]]],18],13],[[]],[[]],[[],71],[[],71],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],0,0,0,0,0,0,0,0,0,0,0,0,[[72,[73,[22]]]],[[72,[73,[22]]]],[[74,[73,[22]]]],[[74,[73,[22]]]],[[72,74],72],[75,76],[74,76],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[77,77],[72,72],[78,78],[79,79],[80,80],[75,75],[81,81],[74,74],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[77,77],10],[[72,72],10],[[79,79],10],[[75,75],10],[[74,74],10],[[],77],[[],72],[[],79],[72,82],[[77,77],11],[[72,72],11],[[79,79],11],[[75,75],11],[[74,74],11],[[72,72],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[77,12],13],[[72,12],13],[[72,12],13],[[78,12],13],[[78,12],13],[[79,12],13],[[79,12],13],[[80,12],13],[[80,12],13],[[75,12],13],[[75,12],13],[[81,12],13],[[81,12],13],[[74,12],13],[[74,12],13],0,[72,77],[[]],[79,77],[83,77],[[]],[80,78],[81,78],[[]],[[]],[72,79],[[]],[[]],[[]],[[]],[[77,14]],[[72,14]],[[79,14]],[[75,14]],[[74,14]],0,[[[63,[76]]],77],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[72,11],[[[0,[[63,[76]],[6,[[84,[76]]]]]]],[[19,[75,80]]]],[[[0,[[63,[76]],[6,[[84,[76]]]]]]],[[19,[74,81]]]],[[[63,[76]]],[[19,[72,81]]]],[[[63,[76]]],[[19,[79,78]]]],[[77,77],[[15,[10]]]],[[72,72],[[15,[10]]]],[[79,79],[[15,[10]]]],[[75,75],[[15,[10]]]],[[74,74],[[15,[10]]]],0,[69],[69],[69],[[77,[17,[16]],18],13],[[77,[17,[32]],18],13],[[77,[17,[31]],18],13],[[72,[17,[31]],18],13],[[72,[17,[16]],18],13],[[72,[17,[32]],18],13],[[79,[17,[31]],18],13],[[79,[17,[32]],18],13],[[79,[17,[16]],18],13],[[75,[17,[[0,[1,2]]]],18],13],[[],72],[72,5],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],71],[[],71],[[],71],[[],71],[[],71],[[],71],[[],71],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[[63,[76]]],77],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[[18,[[0,[70,2]]]]],[[18,[[0,[70,2]]]]]],[[]],[85],[[[18,[[0,[70,2]]]]],[[18,[[0,[70,2]]]]]],[[[17,[[0,[1,2,28]]]],12],13],[[[18,[[0,[70,2,28]]]],12],13],[[[86,[[3,[[0,[1,2]]]],[0,[1,2]]]],12],13],[[[86,[[0,[[3,[[0,[1,2,28]]]],28]],[0,[1,2,28]]]],12],13],[[]],[[]],[[]],0,[[]],[[]],[[]],[[[0,[2,87,88]]],89],[2,90],[[[18,[[0,[70,2]]]]],[[0,[70,2]]]],[[[18,[[0,[70,2]]]]],72],0,[[[0,[1,2]],91],[[17,[[0,[1,2]]]]]],[[72,[0,[70,2]]],[[18,[[0,[70,2]]]]]],[[[3,[[0,[1,2]]]],[0,[1,2]],18],[[86,[[3,[[0,[1,2]]]],[0,[1,2]]]]]],[[17,18],13],[[[17,[[0,[1,2]]]],92,85]],[[[18,[[0,[70,2]]]]],93],0,[[]],[[],71],[[],19],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[[18,[[0,[70,2]]]],[0,[70,2]]],[[18,[[0,[70,2]]]]]],[[76,91],13],[[[17,[[0,[1,2]]]],76],13],0,[[]],[[]],[16,16],[[]],[[],16],[[16,16],11],[[],11],[[16,12],13],[[]],[[]],[[]],[[],19],[[],19],[[],20],[[16,76,91],13],0,0,[[]],[[]],[[]],[[]],[31,31],[94,94],[[]],[[]],[[],31],[[94,85]],[[31,31],11],[[],11],[[31,12],13],[[94,12],13],[[]],[[]],[[]],[[]],[93,31],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[31,76,91],13],0,0,[[]],[[]],[[]],[[]],[32,32],[95,95],[[]],[[]],[[],32],[[95,85]],[[32,32],11],[[],11],[[32,12],13],[[95,12],13],[[]],[[]],[[]],[[]],[93,32],[[]],[[]],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[32,76,91],13],0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[4,[[3,[[0,[1,2]]]],22]],[0,[1,2]],5,5],[[19,[96]]]],[[[97,[22]]],[[97,[22]]]],[[[97,[22]]],[[97,[22]]]],0,[98,98],[[[4,[[0,[22,23]]]]],[[4,[[0,[22,23]]]]]],[[[73,[[0,[22,23]]]]],[[73,[[0,[22,23]]]]]],[[[97,[[0,[22,23]],23]]],[[97,[[0,[22,23]],23]]]],[[]],[[]],[[]],[[]],[[],[[4,[22]]]],[[],[[73,[22]]]],[[],[[97,[22,26]]]],0,[[[4,[[0,[22,27]]]],[4,[[0,[22,27]]]]],11],[[[73,[[0,[22,27]]]],[73,[[0,[22,27]]]]],11],[[[97,[[0,[22,27]],27]],[97,[[0,[22,27]],27]]],11],[[],11],[[],11],[[],11],[[96,12],13],[[96,12],13],[[98,12],13],[[98,12],13],[[[4,[[0,[22,28]]]],12],13],[[[73,[[0,[22,28]]]],12],13],[[[97,[[0,[22,28]],28]],12],13],[[]],[[]],[[]],[[]],[[]],[[[73,[22]],[99,[[73,[22]]]]]],[[[73,[22]],[99,[[73,[22]]]]]],[[[73,[22]],72,[97,[22]]]],[[[73,[22]],72,[97,[22]]]],[[]],[[]],[[]],[[]],[[]],[[[97,[22]]],11],[[[97,[22]]],11],[[[97,[22]]],11],0,[69],[69],0,[[]],[[]],[[]],[[]],[[],71],[[],71],[[],19],[[],19],[[],19],[[],19],[[],19],[[[73,[22]],72,[97,[22]]],[[19,[98]]]],[[[73,[22]],72,[97,[22]]],[[19,[98]]]],[[],19],[[],19],[[],19],[[],19],[[],19],[[],20],[[],20],[[],20],[[],20],[[],20]],"c":[],"p":[[8,"Format"],[8,"Sized"],[8,"Render"],[3,"Site"],[3,"PathBuf"],[8,"Into"],[3,"AssetComponent"],[3,"Stylesheet"],[3,"Script"],[4,"Ordering"],[15,"bool"],[3,"Formatter"],[6,"Result"],[8,"Hasher"],[4,"Option"],[3,"Html"],[3,"Renderer"],[3,"Context"],[4,"Result"],[3,"TypeId"],[3,"BlockComponent"],[8,"Component"],[8,"Clone"],[3,"InlineBlock"],[8,"Ord"],[8,"Default"],[8,"PartialEq"],[8,"Debug"],[8,"Hash"],[8,"PartialOrd"],[3,"Markdown"],[3,"Text"],[8,"IntoIterRef"],[3,"UnorderedList"],[3,"OrderedList"],[3,"Image"],[3,"Figure"],[3,"Row"],[3,"Table"],[3,"CaptionedTable"],[3,"CellComponent"],[3,"RowComponent"],[3,"CellAttrs"],[3,"Cell"],[15,"never"],[3,"Bold"],[3,"Italic"],[3,"Preformatted"],[3,"Paragraph"],[3,"InlineComponent"],[3,"Audio"],[3,"Bold"],[3,"Italic"],[3,"Preformatted"],[3,"Link"],[3,"Page"],[3,"PageComponent"],[3,"Section"],[3,"SectionComponent"],[3,"Conil"],[8,"AsMut"],[4,"Cocons"],[8,"AsRef"],[8,"Display"],[3,"Pin"],[3,"Context"],[4,"Poll"],[8,"Future"],[3,"Demand"],[8,"ComponentKind"],[3,"String"],[3,"InternalPath"],[3,"Directory"],[3,"Fragment"],[3,"Id"],[15,"str"],[4,"Location"],[4,"InvalidInternalLoc"],[3,"InternalLoc"],[3,"InvalidId"],[3,"InvalidFragment"],[15,"usize"],[3,"Url"],[3,"Box"],[8,"FnOnce"],[3,"RenderAsDisplay"],[8,"Send"],[8,"Sync"],[6,"DynFullComponent"],[6,"DynFullComponentUnsync"],[8,"Write"],[8,"Scope"],[15,"u32"],[3,"Nest"],[3,"Nest"],[3,"BuildError"],[4,"Entry"],[4,"InsertPathError"],[8,"Accessor"],[8,"Coproduct"],[8,"FullRender"]]},\
"form_urlencoded":{"doc":"Parser and serializer for the …","t":"DGQDDDILLKLLLLLLLLFLLLLLLKLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLL","n":["ByteSerialize","EncodingOverride","Finished","Parse","ParseIntoOwned","Serializer","Target","append_key_only","append_pair","as_mut_string","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byte_serialize","clear","clone","clone_into","encoding_override","extend_keys_only","extend_pairs","finish","finish","fmt","for_suffix","from","from","from","from","into","into","into","into","into_iter","into_iter","into_iter","into_owned","new","next","next","next","parse","size_hint","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id"],"q":[[0,"form_urlencoded"]],"d":["Return value of <code>byte_serialize()</code>.","","","The return type of <code>parse()</code>.","Like <code>Parse</code>, but yields pairs of <code>String</code> instead of pairs of …","The <code>application/x-www-form-urlencoded</code> serializer.","","Serialize and append a name of parameter without any value.","Serialize and append a name/value pair.","","","","","","","","","","The <code>application/x-www-form-urlencoded</code> byte serializer.","Remove any existing name/value pair.","","","Set the character encoding to be used for names and values …","Serialize and append a number of names without values.","Serialize and append a number of name/value pairs.","","If this serializer was constructed with a string, take and …","","Create a new <code>application/x-www-form-urlencoded</code> serializer …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Return a new iterator that yields pairs of <code>String</code> instead …","Create a new <code>application/x-www-form-urlencoded</code> serializer …","","","","Convert a byte string in the …","","","","","","","","","","","","","",""],"i":[0,0,1,0,0,0,0,2,2,1,14,2,8,7,14,2,8,7,0,2,8,8,2,2,2,1,2,7,2,14,2,8,7,14,2,8,7,14,8,7,8,2,14,8,7,0,7,8,14,2,8,7,14,2,8,7,14,2,8,7],"f":[0,0,0,0,0,0,0,[[[2,[1]],3],[[2,[1]]]],[[[2,[1]],3,3],[[2,[1]]]],[[],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[6,[5]]],7],[[[2,[1]]],[[2,[1]]]],[8,8],[[]],[[[2,[1]],9],[[2,[1]]]],[[[2,[1]],10],[[2,[1]]]],[[[2,[1]],10],[[2,[1]]]],[[]],[[[2,[1]]]],[[7,11],12],[[1,13],[[2,[1]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[8,14],[1,[[2,[1]]]],[14,15],[8,15],[7,[[15,[3]]]],[[[6,[5]]],8],[7],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17]],"c":[],"p":[[8,"Target"],[3,"Serializer"],[15,"str"],[3,"String"],[15,"u8"],[15,"slice"],[3,"ByteSerialize"],[3,"Parse"],[6,"EncodingOverride"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"ParseIntoOwned"],[4,"Option"],[4,"Result"],[3,"TypeId"]]},\
"idna":{"doc":"This Rust crate implements IDNA per the WHATWG URL Standard…","t":"DDDLLLLLLLLLLLLFFFLLLLLLLLLLALLLLLLLLLLLLLLLLLLLLFFFF","n":["Config","Errors","Idna","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","check_hyphens","clone","clone_into","default","default","default","domain_to_ascii","domain_to_ascii_strict","domain_to_unicode","fmt","fmt","from","from","from","into","into","into","new","provide","punycode","to_ascii","to_ascii","to_ascii_inner","to_owned","to_string","to_unicode","to_unicode","transitional_processing","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","use_idna_2008_rules","use_std3_ascii_rules","verify_dns_length","decode","decode_to_string","encode","encode_str"],"q":[[0,"idna"],[49,"idna::punycode"]],"d":["","Errors recorded during UTS #46 processing.","","","","","","","","","","","","","","The domain to ASCII algorithm.","The domain to ASCII algorithm, with the <code>beStrict</code> flag set.","The domain to Unicode algorithm.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Punycode (RFC 3492) implementation.","http://www.unicode.org/reports/tr46/#ToASCII","http://www.unicode.org/reports/tr46/#ToASCII","","","","http://www.unicode.org/reports/tr46/#ToUnicode","http://www.unicode.org/reports/tr46/#ToUnicode","","","","","","","","","","","","","","Convert Punycode to Unicode.","Convert Punycode to an Unicode <code>String</code>.","Convert Unicode to Punycode.","Convert an Unicode <code>str</code> to Punycode."],"i":[0,0,0,3,1,4,3,1,4,1,1,1,3,1,4,0,0,0,4,4,3,1,4,3,1,4,3,4,0,3,1,3,1,4,3,1,1,3,1,4,3,1,4,3,1,4,1,1,1,0,0,0,0],"f":[0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],1],[1,1],[[]],[[],3],[[],1],[[],4],[5,[[7,[6,4]]]],[5,[[7,[6,4]]]],[5],[[4,8],9],[[4,8],9],[[]],[[]],[[]],[[]],[[]],[[]],[1,3],[10],0,[[3,5,6],[[7,[4]]]],[[1,5],[[7,[6,4]]]],[[3,5,6],4],[[]],[[],6],[[3,5,6],[[7,[4]]]],[[1,5]],[[1,2],1],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],11],[[],11],[[],11],[[1,2],1],[[1,2],1],[[1,2],1],[5,[[14,[[13,[12]]]]]],[5,[[14,[6]]]],[[[15,[12]]],[[14,[6]]]],[5,[[14,[6]]]]],"c":[],"p":[[3,"Config"],[15,"bool"],[3,"Idna"],[3,"Errors"],[15,"str"],[3,"String"],[4,"Result"],[3,"Formatter"],[6,"Result"],[3,"Demand"],[3,"TypeId"],[15,"char"],[3,"Vec"],[4,"Option"],[15,"slice"]]},\
"percent_encoding":{"doc":"URLs use special characters to indicate the parts of the …","t":"DRRDDLLLLLLLLLLLLLLLLLLLLLLLLLFFFFLLLLLLLLLLLLLLLF","n":["AsciiSet","CONTROLS","NON_ALPHANUMERIC","PercentDecode","PercentEncode","add","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","decode_utf8","decode_utf8_lossy","fmt","fmt","from","from","from","into","into","into","into_iter","into_iter","next","next","percent_decode","percent_decode_str","percent_encode","percent_encode_byte","remove","size_hint","size_hint","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","utf8_percent_encode"],"q":[[0,"percent_encoding"]],"d":["Represents a set of characters or bytes in the ASCII range.","The set of 0x00 to 0x1F (C0 controls), and 0x7F (DEL).","Everything that is not an ASCII letter or digit.","The return type of <code>percent_decode</code>.","The return type of <code>percent_encode</code> and <code>utf8_percent_encode</code>.","","","","","","","","","","","","Decode the result of percent-decoding as UTF-8.","Decode the result of percent-decoding as UTF-8, lossily.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Percent-decode the given bytes.","Percent-decode the given string.","Percent-encode the given bytes with the given set.","Return the percent-encoding of the given byte.","","","","","","","","","","","","","","","","Percent-encode the UTF-8 encoding of the given string."],"i":[0,0,0,0,0,1,1,3,4,1,3,4,3,4,3,4,4,4,3,4,1,3,4,1,3,4,3,4,3,4,0,0,0,0,1,3,4,3,4,3,1,3,4,1,3,4,1,3,4,0],"f":[0,0,0,0,0,[[1,2],1],[[]],[[]],[[]],[[]],[[]],[[]],[3,3],[4,4],[[]],[[]],[4,[[8,[[6,[5]],7]]]],[4,[[6,[5]]]],[[3,9],10],[[4,9],10],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,[[11,[5]]]],[4,[[11,[2]]]],[[[12,[2]]],4],[5,4],[[[12,[2]],1],3],[2,5],[[1,2],1],[3],[4],[[]],[[]],[[],13],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],14],[[],14],[[],14],[[5,1],3]],"c":[],"p":[[3,"AsciiSet"],[15,"u8"],[3,"PercentEncode"],[3,"PercentDecode"],[15,"str"],[4,"Cow"],[3,"Utf8Error"],[4,"Result"],[3,"Formatter"],[6,"Result"],[4,"Option"],[15,"slice"],[3,"String"],[3,"TypeId"]]},\
"tinyvec":{"doc":"<code>tinyvec</code> provides 100% safe vec-like data structures.","t":"IDDDDSNNNNNNQDDEEEDDLLLOOLLLLLLLLLLLLLLLKLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLOOLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["Array","ArrayVec","ArrayVecDrain","ArrayVecIterator","ArrayVecSplice","CAPACITY","Heap","Heap","Heap","Inline","Inline","Inline","Item","SliceVec","SliceVecDrain","TinyVec","TinyVecDrain","TinyVecIterator","TinyVecSplice","TryFromSliceError","append","append","append","array_vec","array_vec","as_mut","as_mut","as_mut","as_mut_ptr","as_mut_ptr","as_mut_ptr","as_mut_slice","as_mut_slice","as_mut_slice","as_ptr","as_ptr","as_ptr","as_ref","as_ref","as_ref","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice","as_slice_mut","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","capacity","capacity","capacity","clear","clear","clear","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count","default","default","default","default","deref","deref","deref","deref_mut","deref_mut","deref_mut","drain","drain","drain","drain_to_vec","drain_to_vec_and_reserve","drop","drop","drop","eq","eq","eq","eq","eq","eq","eq","eq","extend","extend","extend","extend_from_slice","extend_from_slice","extend_from_slice","fill","fill","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","for_each","for_each","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_array_empty","from_array_len","from_array_len","from_iter","from_iter","from_slice_len","hash","hash","hash","index","index","index","index_mut","index_mut","index_mut","insert","insert","insert","into","into","into","into","into","into","into","into","into","into","into","into_inner","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","into_iter","is_empty","is_empty","is_empty","is_heap","is_inline","last","last","last","last","len","len","len","len","len","move_to_the_heap","move_to_the_heap_and_reserve","new","new","next","next","next","next","next","next","next","next_back","next_back","next_back","next_back","next_back","next_back","nth","nth","nth","nth","partial_cmp","partial_cmp","partial_cmp","pop","pop","pop","push","push","push","remove","remove","remove","reserve","reserve_exact","resize","resize","resize","resize_with","resize_with","resize_with","retain","retain","retain","set_len","set_len","shrink_to_fit","size_hint","size_hint","size_hint","size_hint","size_hint","size_hint","splice","splice","split_off","split_off","split_off","swap_remove","swap_remove","swap_remove","tiny_vec","tiny_vec","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","truncate","truncate","truncate","try_append","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from_array_len","try_from_array_len","try_from_slice_len","try_insert","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_push","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_capacity"],"q":[[0,"tinyvec"]],"d":["A trait for types that are an array.","An array-backed, vector-like data structure.","Draining iterator for <code>ArrayVec</code>","Iterator for consuming an <code>ArrayVec</code> and returning owned …","Splicing iterator for <code>ArrayVec</code> See <code>ArrayVec::splice</code>","The number of slots in the thing.","","","","","","","The type of the items in the thing.","A slice-backed vector-like data structure.","Draining iterator for <code>SliceVec</code>","A vector that starts inline, but can automatically move to …","Draining iterator for <code>TinyVecDrain</code>","Iterator for consuming an <code>TinyVec</code> and returning owned …","Splicing iterator for <code>TinyVec</code> See <code>TinyVec::splice</code>","The error type returned when a conversion from a slice to …","Move all values from <code>other</code> into this vec.","","Move all values from <code>other</code> into this vec.","Helper to make an <code>ArrayVec</code>.","Helper to make an <code>ArrayVec</code>.","","","","A <code>*mut</code> pointer to the backing array.","A <code>*mut</code> pointer to the backing slice.","A mutable pointer to the backing array.","Performs a <code>deref_mut</code>, into unique slice form.","Performs a <code>deref_mut</code>, into unique slice form.","Helper for getting the mut slice.","A <code>*const</code> pointer to the backing array.","A <code>*const</code> pointer to the backing slice.","A const pointer to the backing array.","","","","Gives a shared slice over the whole thing.","Performs a <code>deref</code>, into shared slice form.","Returns the remaining items of this iterator as a slice.","Performs a <code>deref</code>, into shared slice form.","Helper for getting the shared slice.","Returns the remaining items of this iterator as a slice.","Gives a unique slice over the whole thing.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The capacity of the <code>ArrayVec</code>.","The capacity of the <code>SliceVec</code>.","The capacity of the <code>TinyVec</code>.","Truncates the <code>ArrayVec</code> down to length 0.","Truncates the <code>SliceVec</code> down to length 0.","Removes all elements from the vec.","","","","","","","","","","","","","","","Create a default-initialized instance of ourself, similar …","","","","","","","","","","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Creates a draining iterator that removes the specified …","Drains all elements to a Vec","Drains all elements to a Vec, but reserves additional space","","","","","","","","","","","","","","","Clone each element of the slice into this <code>ArrayVec</code>.","","Clone each element of the slice into this vec.","Fill the vector until its capacity has been reached.","Fill the vector until its capacity has been reached.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","The output has a length equal to the full array.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>AsRef::as_mut</code> then uses the full slice as the …","Returns the argument unchanged.","Uses the full slice as the initial length.","Returns the argument unchanged.","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Wraps up an array as a new empty <code>ArrayVec</code>.","Wraps up an array and uses the given length as the initial …","Wraps up an array and uses the given length as the initial …","","","Wraps up a slice and uses the given length as the initial …","","","","","","","","","","Inserts an item at the position given, moving all …","Inserts an item at the position given, moving all …","Inserts an item at the position given, moving all …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the inner array of the <code>ArrayVec</code>.","","","","","","","","","","","","","","","Checks if the length is 0.","Checks if the length is 0.","If the vec is empty.","Returns whether elements are on heap","Returns whether elements are on stack","","","","","The length of the <code>ArrayVec</code> (in elements).","","The length of the <code>SliceVec</code> (in elements).","The length of the vec (in elements).","","Moves the content of the TinyVec to the heap, if it’s …","If TinyVec is inline, moves the content of it to the heap. …","Makes a new, empty <code>ArrayVec</code>.","Makes a new, empty vec.","","","","","","","","","","","","","","","","","","","","","Remove and return the last element of the vec, if there is …","Remove and return the last element of the vec, if there is …","Remove and return the last element of the vec, if there is …","Place an element onto the end of the vec.","Place an element onto the end of the vec.","Place an element onto the end of the vec.","Removes the item at <code>index</code>, shifting all others down by one …","Removes the item at <code>index</code>, shifting all others down by one …","Removes the item at <code>index</code>, shifting all others down by one …","Reserves additional space. Moves to the heap if array can…","Reserves additional space. Moves to the heap if array can…","As <code>resize_with</code> and it clones the value as the closure.","As <code>resize_with</code> and it clones the value as the closure.","Resize the vec to the new length.","Resize the vec to the new length.","Resize the vec to the new length.","Resize the vec to the new length.","Walk the vec and keep only the elements that pass the …","Walk the vec and keep only the elements that pass the …","Walk the vec and keep only the elements that pass the …","Forces the length of the vector to <code>new_len</code>.","Forces the length of the vector to <code>new_len</code>.","Shrinks the capacity of the vector as much as possible. It …","","","","","","","Creates a splicing iterator that removes the specified …","Creates a splicing iterator that removes the specified …","Splits the collection at the point given.","Splits the collection at the point given.","Splits the collection at the point given.","Remove an element, swapping the end of the vec into its …","Remove an element, swapping the end of the vec into its …","Remove an element, swapping the end of the vec into its …","Helper to make a <code>TinyVec</code>.","Helper to make a <code>TinyVec</code>.","","","","","","","","Reduces the vec’s length to the given value.","Reduces the vec’s length to the given value.","Reduces the vec’s length to the given value.","Move all values from <code>other</code> into this vec. If appending …","The output has a length equal to that of the slice, with …","","","","","","","","","","","","Wraps an array, using the given length as the starting …","Wraps an array, using the given length as the starting …","Wraps a slice, using the given length as the starting …","Tries to insert an item at the position given, moving all …","","","","","","","","","","","","Tries to place an element onto the end of the vec. Returns …","","","","","","","","","","","","Makes a new TinyVec with <em>at least</em> the given capacity."],"i":[0,0,0,0,0,1,5,14,8,5,14,8,1,0,0,0,0,0,0,0,2,4,5,0,0,2,4,5,2,4,5,2,4,5,2,4,5,2,4,5,1,2,7,4,5,8,1,2,2,20,7,16,4,4,17,5,5,14,21,8,11,2,2,20,7,16,4,4,17,5,5,14,21,8,11,2,4,5,2,4,5,2,5,11,2,5,2,5,11,2,4,5,7,14,8,1,2,4,5,2,4,5,2,4,5,2,4,5,2,2,20,17,21,2,2,2,4,4,5,5,5,2,4,5,2,4,5,2,4,2,2,2,2,2,2,2,2,2,7,4,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,8,11,11,16,14,2,2,20,7,16,4,4,4,17,5,5,5,5,5,5,14,21,8,11,2,2,5,2,5,4,2,4,5,2,4,5,2,4,5,2,4,5,2,20,7,16,4,17,5,14,21,8,11,2,2,2,2,20,7,16,4,17,5,5,5,14,21,8,2,4,5,5,5,7,16,14,8,2,20,4,5,21,5,5,2,5,20,7,16,17,14,21,8,20,7,16,14,21,8,7,16,14,8,2,4,5,2,4,5,2,4,5,2,4,5,5,5,2,4,5,2,4,5,2,4,5,2,4,5,20,7,16,14,21,8,2,5,2,4,5,2,4,5,0,0,2,5,11,2,4,5,11,2,4,5,2,2,2,20,7,16,4,17,5,14,21,8,11,2,5,4,2,2,20,7,16,4,17,5,14,21,8,11,2,2,20,7,16,4,17,5,14,21,8,11,5],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[2,[1]],[2,[1]]]],[[[4,[3]],[4,[3]]]],[[[5,[1]],[5,[1]]]],0,0,[[[2,[1]]],6],[4,6],[[[5,[1]]],6],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]]],6],[4,6],[[[5,[1]]],6],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]]],6],[4,6],[[[5,[1]]],6],[[],6],[[[2,[1]]],6],[[[7,[1]]],6],[4,6],[[[5,[1]]],6],[[[8,[1]]],6],[[],6],[[]],[[[2,[1]]],6],[[]],[[]],[[]],[4,6],[[]],[[]],[[[5,[1]]],6],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],6],[[]],[[]],[[]],[[]],[4,6],[[]],[[]],[[[5,[1]]],6],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],9],[4,9],[[[5,[1]]],9],[[[2,[1]]]],[[[4,[3]]]],[[[5,[1]]]],[[[2,[[0,[1,10]]]]],[[2,[[0,[1,10]]]]]],[[[5,[[0,[1,10]]]]],[[5,[[0,[1,10]]]]]],[11,11],[[[2,[[0,[1,10]]]],[2,[[0,[1,10]]]]]],[[[5,[[0,[1,10]]]],[5,[[0,[1,10]]]]]],[[]],[[]],[[]],[[[2,[1]],[2,[1]]],12],[[[4,[13]],[4,[13]]],12],[[[5,[1]],[5,[1]]],12],[[[7,[1]]],9],[[[14,[1]]],9],[[[8,[1]]],9],[[]],[[],[[2,[1]]]],[[],4],[[],[[5,[1]]]],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]],[15,[9]]],16],[[[4,[3]],[15,[9]]],[[17,[3]]]],[[[5,[1]],[15,[9]]],[[14,[1]]]],[[[2,[1]]],18],[[[2,[1]],9],18],[[[20,[1,19]]]],[[[17,[3]]]],[[[21,[1,19]]]],[[[2,[1]],1],22],[[[2,[1]],6],22],[[[2,[1]],[2,[1]]],22],[[[4,[23]],[6,[23]]],22],[[[4,[23]],[4,[23]]],22],[[[5,[1]],1],22],[[[5,[1]],[5,[1]]],22],[[[5,[1]],6],22],[[[2,[1]],24]],[[4,24]],[[[5,[1]],24]],[[[2,[1]],6]],[[[4,[10]],[6,[10]]]],[[[5,[1]],6]],[[[2,[1]],24]],[[4,24]],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[2,[1]],25],26],[[[7,[1]],25],26],[[[4,[27]],25],26],[[[4,[28]],25],26],[[[4,[29]],25],26],[[[4,[30]],25],26],[[[4,[31]],25],26],[[[4,[32]],25],26],[[[4,[33]],25],26],[[[4,[34]],25],26],[[[4,[35]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[5,[1]],25],26],[[[8,[1]],25],26],[[11,25],26],[[11,25],26],[[[16,[3]],36]],[[[14,[1]],36]],[[]],[1,[[2,[1]]]],[[]],[[]],[[]],[[[37,[6]]],4],[[]],[6,4],[[]],[[[6,[[0,[10,3]]]]],[[5,[1]]]],[[[2,[1]]],[[5,[1]]]],[38],[[]],[1,[[5,[1]]]],[[[6,[[0,[10,3]]]]],[[5,[1]]]],[[]],[[]],[[]],[[]],[[],2],[[1,9],[[2,[1]]]],[[1,9],[[5,[1]]]],[24,[[2,[1]]]],[24,[[5,[1]]]],[[6,9],4],[[[2,[1]],39]],[[[4,[40]],39]],[[[5,[1]],39]],[[[2,[1]],[41,[6]]]],[[4,[41,[6]]]],[[[5,[1]],[41,[6]]]],[[[2,[1]],[41,[6]]]],[[4,[41,[6]]]],[[[5,[1]],[41,[6]]]],[[[2,[1]],9]],[[4,9]],[[[5,[1]],9]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[2,[1]]],1],[[[2,[1]]]],[[[2,[1]]]],[[[2,[1]]]],[[]],[[]],[[]],[4],[[]],[[[5,[1]]]],[[[5,[1]]]],[[[5,[1]]]],[[]],[[]],[[]],[[[2,[1]]],22],[4,22],[[[5,[1]]],22],[[[5,[1]]],22],[[[5,[1]]],22],[[[7,[1]]],42],[[[16,[3]]],42],[[[14,[1]]],42],[[[8,[1]]],42],[[[2,[1]]],9],[[[20,[1,19]]],9],[4,9],[[[5,[1]]],9],[[[21,[1,19]]],9],[[[5,[1]]]],[[[5,[1]],9]],[[],[[2,[1]]]],[[],[[5,[1]]]],[[[20,[1,19]]],42],[[[7,[1]]],42],[[[16,[3]]],42],[[[17,[3]]],42],[[[14,[1]]],42],[[[21,[1,19]]],42],[[[8,[1]]],42],[[[20,[1,[0,[19,43]]]]],42],[[[7,[1]]],42],[[[16,[3]]],42],[[[14,[1]]],42],[[[21,[1,[0,[19,43]]]]],42],[[[8,[1]]],42],[[[7,[1]],9],42],[[[16,[3]],9],42],[[[14,[1]],9],42],[[[8,[1]],9],42],[[[2,[1]],[2,[1]]],[[42,[12]]]],[[[4,[44]],[4,[44]]],[[42,[12]]]],[[[5,[1]],[5,[1]]],[[42,[12]]]],[[[2,[1]]],42],[[[4,[3]]],[[42,[3]]]],[[[5,[1]]],42],[[[2,[1]]]],[4],[[[5,[1]]]],[[[2,[1]],9]],[[[4,[3]],9],3],[[[5,[1]],9]],[[[5,[1]],9]],[[[5,[1]],9]],[[[2,[1]],9]],[[[4,[10]],9,10]],[[[5,[1]],9]],[[[2,[1]],9,36]],[[4,9,36]],[[[5,[1]],9,36]],[[[2,[1]],36]],[[[4,[3]],36]],[[[5,[1]],36]],[[[2,[1]],9]],[[4,9]],[[[5,[1]]]],[[[20,[1,19]]]],[[[7,[1]]]],[[[16,[3]]]],[[[14,[1]]]],[[[21,[1,19]]]],[[[8,[1]]]],[[[2,[1]],[15,[9]],24],[[20,[1,45]]]],[[[5,[1]],[15,[9]],24],[[21,[1,45]]]],[[[2,[1]],9],[[2,[1]]]],[[4,9],4],[[[5,[1]],9],[[5,[1]]]],[[[2,[1]],9]],[[[4,[3]],9],3],[[[5,[1]],9]],0,0,[[]],[[]],[[]],[[],46],[[],46],[[],46],[[],46],[[[2,[1]],9]],[[[4,[3]],9]],[[[5,[1]],9]],[[[2,[1]],[2,[1]]],[[42,[[2,[1]]]]]],[[[6,[[0,[10,3]]]]],[[47,[[2,[1]]]]]],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[1,9],[[47,[[2,[1]],1]]]],[[1,9],[[47,[[5,[1]],1]]]],[[6,9],[[42,[4]]]],[[[2,[1]],9],42],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[[2,[1]]],42],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[[],48],[9,[[5,[1]]]]],"c":[],"p":[[8,"Array"],[3,"ArrayVec"],[8,"Default"],[3,"SliceVec"],[4,"TinyVec"],[15,"slice"],[3,"ArrayVecIterator"],[4,"TinyVecIterator"],[15,"usize"],[8,"Clone"],[3,"TryFromSliceError"],[4,"Ordering"],[8,"Ord"],[4,"TinyVecDrain"],[8,"RangeBounds"],[3,"ArrayVecDrain"],[3,"SliceVecDrain"],[3,"Vec"],[8,"Iterator"],[3,"ArrayVecSplice"],[3,"TinyVecSplice"],[15,"bool"],[8,"PartialEq"],[8,"IntoIterator"],[3,"Formatter"],[6,"Result"],[8,"Binary"],[8,"Debug"],[8,"Octal"],[8,"UpperExp"],[8,"Display"],[8,"Pointer"],[8,"UpperHex"],[8,"LowerExp"],[8,"LowerHex"],[8,"FnMut"],[8,"AsMut"],[15,"never"],[8,"Hasher"],[8,"Hash"],[8,"SliceIndex"],[4,"Option"],[8,"DoubleEndedIterator"],[8,"PartialOrd"],[3,"Fuse"],[3,"String"],[4,"Result"],[3,"TypeId"]]},\
"tinyvec_macros":{"doc":"","t":"O","n":["impl_mirrored"],"q":[[0,"tinyvec_macros"]],"d":[""],"i":[0],"f":[0],"c":[],"p":[]},\
"unicode_bidi":{"doc":"This crate implements the Unicode Bidirectional Algorithm …","t":"NNNNECDNENNNNDDNNNNCCGNNNNNNDDNNNNCNNRNFLLLLLLLLLLLLLLLLLAALLLLLLLLLLLLLALLLLLLLLMLLLLLLLLAMLMLLLLLMMMMMMLLLLMMLLLLLLLLLLLLLLLLLLLLLLLIDKLLLLLLLLMMLLLLFRRRRRRRRRRRRERDRRNRLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AL","AN","B","BN","BidiClass","BidiDataSource","BidiInfo","CS","Direction","EN","ES","ET","FSI","HardcodedBidiData","InitialInfo","L","LRE","LRI","LRO","LTR_LEVEL","Level","LevelRun","Ltr","Mixed","NSM","ON","PDF","PDI","Paragraph","ParagraphInfo","R","RLE","RLI","RLO","RTL_LEVEL","Rtl","S","UNICODE_VERSION","WS","bidi_class","bidi_class","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","data_source","deprecated","direction","eq","eq","eq","eq","eq","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","format_chars","from","from","from","from","from","from","from","has_rtl","info","into","into","into","into","into","into","into","len","level","level","level_at","levels","new","new","new","new_with_data_source","new_with_data_source","original_classes","original_classes","para","paragraphs","paragraphs","range","reorder_line","reorder_visual","reordered_levels","reordered_levels_per_char","text","text","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","visual_runs","BidiDataSource","BidiMatchedOpeningBracket","bidi_class","bidi_matched_opening_bracket","borrow","borrow_mut","clone","clone_into","fmt","from","into","is_open","opening","to_owned","try_from","try_into","type_id","visual_runs","ALM","FSI","LRE","LRI","LRM","LRO","PDF","PDI","RLE","RLI","RLM","RLO","Error","LTR_LEVEL","Level","MAX_EXPLICIT_DEPTH","MAX_IMPLICIT_DEPTH","OutOfRangeNumber","RTL_LEVEL","bidi_class","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","cmp","eq","eq","eq","eq","equivalent","fmt","fmt","from","from","from","from_slice_unchecked","has_rtl","into","into","into","is_ltr","is_rtl","lower","ltr","max_explicit_depth","max_implicit_depth","new","new_explicit","new_explicit_next_ltr","new_explicit_next_rtl","new_lowest_ge_rtl","number","partial_cmp","raise","raise_explicit","rtl","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","vec"],"q":[[0,"unicode_bidi"],[134,"unicode_bidi::data_source"],[151,"unicode_bidi::deprecated"],[152,"unicode_bidi::format_chars"],[164,"unicode_bidi::level"]],"d":["","","","","Represents values of the Unicode character property …","","Bidi information of the text.","","","","","","","Hardcoded Bidi data that ships with the unicode-bidi crate.","Initial bidi information of the text.","","","","","","","A maximal substring of characters with the same embedding …","","","","","","","Contains a reference of <code>BidiInfo</code> and one of its <code>paragraphs</code>.","Bidi information about a single paragraph","","","","","","","","The Unicode version of data","","Find the <code>BidiClass</code> of a single char.","","","","","","","","","","","","","","","","","","","This module holds deprecated assets only.","Returns if the paragraph is Left direction, right …","","","","","","","","","","","","","Directional Formatting Characters","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","If processed text has any computed RTL levels","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Gets the length of the paragraph in the source text.","Bidi Embedding Level","The paragraph embedding level.","Returns the <code>Level</code> of a certain character in the paragraph.","The directional embedding level of each byte in the text.","Find the paragraphs and BidiClasses in a string of text.","Split the text into paragraphs and determine the bidi …","","Find the paragraphs and BidiClasses in a string of text, …","Split the text into paragraphs and determine the bidi …","The BidiClass of the character at each byte in the text. …","The BidiClass of the character at each byte in the text.","","The boundaries and level of each paragraph within the text.","The boundaries and paragraph embedding level of each …","The paragraphs boundaries within the text, as byte indices.","Re-order a line based on resolved levels and return the …","Reorders pre-calculated levels of a sequence of characters.","Re-order a line based on resolved levels and return only …","Re-order a line based on resolved levels and return only …","The text","The text","","","","","","","","","","","","","","","","","","","","","","","Find the level runs within a line and return them in …","This trait abstracts over a data source that is able to …","This is the return value of …","","If this character is a bracket according to …","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Whether or not the requested bracket was an opening …","The corresponding opening bracket in this bracket pair, …","","","","","Find the level runs within a line and return them in …","ARABIC LETTER MARK","FIRST STRONG ISOLATE","LEFT-TO-RIGHT EMBEDDING","LEFT‑TO‑RIGHT ISOLATE","LEFT-TO-RIGHT MARK","LEFT-TO-RIGHT OVERRIDE","POP DIRECTIONAL FORMATTING","POP DIRECTIONAL ISOLATE","RIGHT-TO-LEFT EMBEDDING","RIGHT‑TO‑LEFT ISOLATE","RIGHT-TO-LEFT MARK","RIGHT-TO-LEFT OVERRIDE","Errors that can occur on Level creation or mutation","","Embedding Level","During explicit level resolution, embedding level can go …","During implicit level resolution, embedding level can go …","Out-of-range (invalid) embedding level number.","","Generate a character type based on a level (as specified …","","","","","","","","","","","","","","","Create level by number","Returns the argument unchanged.","Returns the argument unchanged.","Converts a byte slice to a slice of Levels","If levels has any RTL (odd) level","Calls <code>U::from(self)</code>.","Convert to the level number","Calls <code>U::from(self)</code>.","If this level is left-to-right.","If this level is right-to-left.","Lower level by <code>amount</code>, fail if number goes below zero.","New LTR level with smallest number value (0).","Maximum depth of the directional status stack during …","Maximum depth of the directional status stack during …","Create new level, fail if number is larger than …","Create new level, fail if number is larger than <code>max_depth</code>.","The next LTR (even) level greater than this, or fail if …","The next RTL (odd) level greater than this, or fail if …","The lowest RTL (odd) level greater than or equal to this, …","The level number.","","Raise level by <code>amount</code>, fail if number is larger than …","Raise level by <code>amount</code>, fail if number is larger than …","New RTL level with smallest number value (1).","","","","","","","",""],"i":[2,2,2,2,0,0,0,2,0,2,2,2,2,0,0,2,2,2,2,0,0,0,5,5,2,2,2,2,0,0,2,2,2,2,0,5,2,0,2,0,3,3,2,5,7,8,9,4,3,2,5,7,8,9,4,2,2,0,0,4,2,5,7,8,9,2,2,5,7,8,9,4,0,3,2,5,7,8,9,4,9,4,3,2,5,7,8,9,4,7,0,7,4,9,8,9,4,8,9,8,9,4,8,9,7,9,9,9,9,8,9,2,3,2,5,7,8,9,4,3,2,5,7,8,9,4,3,2,5,7,8,9,4,9,0,0,16,16,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,27,0,13,13,27,13,27,13,13,13,13,13,13,27,13,13,27,13,13,27,13,0,13,13,27,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,27,13,27,13,27,13],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[[3,1],2],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[[]],0,0,[4,5],[[2,2],6],[[5,5],6],[[7,7],6],[[8,8],6],[[9,9],6],[[],6],[[2,10],11],[[5,10],11],[[7,10],11],[[8,10],11],[[9,10],11],[[4,10],11],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[9,6],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[7,12],0,0,[[4,12],13],0,[[14,[15,[13]]],8],[[14,[15,[13]]],9],[[9,7],4],[[16,14,[15,[13]]],8],[[16,14,[15,[13]]],9],0,0,0,0,0,0,[[9,7,[17,[12]]],[[18,[14]]]],[[[19,[13]]],[[20,[12]]]],[[9,7,[17,[12]]],[[20,[13]]]],[[9,7,[17,[12]]],[[20,[13]]]],0,0,[[]],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[9,7,[17,[12]]]],0,0,[1,2],[1,[[15,[23]]]],[[]],[[]],[23,23],[[]],[[23,10],11],[[]],[[]],0,0,[[]],[[],21],[[],21],[[],22],[[[17,[12]],[19,[13]]],[[20,[24]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[13,2],[[]],[[]],[[]],[[]],[13,13],[[]],[[13,13],25],[[13,26],6],[[13,13],6],[[13,14],6],[[27,27],6],[[],6],[[13,10],11],[[27,10],11],[28,13],[[]],[[]],[[[19,[28]]],[[19,[13]]]],[[[19,[13]]],6],[[]],[13,28],[[]],[13,6],[13,6],[[13,28],[[21,[27]]]],[[],13],[[],28],[[],28],[28,[[21,[13,27]]]],[28,[[21,[13,27]]]],[13,[[21,[13,27]]]],[13,[[21,[13,27]]]],[13,[[21,[13,27]]]],[13,28],[[13,13],[[15,[25]]]],[[13,28],[[21,[27]]]],[[13,28],[[21,[27]]]],[[],13],[[]],[[],21],[[],21],[[],21],[[],21],[[],22],[[],22],[[[19,[28]]],[[20,[13]]]]],"c":[151],"p":[[15,"char"],[4,"BidiClass"],[3,"HardcodedBidiData"],[3,"Paragraph"],[4,"Direction"],[15,"bool"],[3,"ParagraphInfo"],[3,"InitialInfo"],[3,"BidiInfo"],[3,"Formatter"],[6,"Result"],[15,"usize"],[3,"Level"],[15,"str"],[4,"Option"],[8,"BidiDataSource"],[3,"Range"],[4,"Cow"],[15,"slice"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[3,"BidiMatchedOpeningBracket"],[6,"LevelRun"],[4,"Ordering"],[3,"String"],[4,"Error"],[15,"u8"]]},\
"unicode_normalization":{"doc":"Unicode character composition and decomposition utilities …","t":"DENNDDDRINLLLLLLLLLLAKLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFFFFFFFLLLLKLLLLKLLLLKLLLLKLLLLLLKLLLLLLLLLLLLLLLLLLLLLLLLLFFFFFFF","n":["Decompositions","IsNormalized","Maybe","No","Recompositions","Replacements","StreamSafe","UNICODE_VERSION","UnicodeNormalization","Yes","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","char","cjk_compat_variants","cjk_compat_variants","cjk_compat_variants","cjk_compat_variants","cjk_compat_variants","clone","clone","clone","clone_into","clone_into","clone_into","eq","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from","into","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_nfc","is_nfc_quick","is_nfc_stream_safe","is_nfc_stream_safe_quick","is_nfd","is_nfd_quick","is_nfd_stream_safe","is_nfd_stream_safe_quick","is_nfkc","is_nfkc_quick","is_nfkd","is_nfkd_quick","next","next","next","next","nfc","nfc","nfc","nfc","nfc","nfd","nfd","nfd","nfd","nfd","nfkc","nfkc","nfkc","nfkc","nfkc","nfkd","nfkd","nfkd","nfkd","nfkd","size_hint","size_hint","stream_safe","stream_safe","stream_safe","stream_safe","stream_safe","to_owned","to_owned","to_owned","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","canonical_combining_class","compose","decompose_canonical","decompose_cjk_compat_variants","decompose_compatible","is_combining_mark","is_public_assigned"],"q":[[0,"unicode_normalization"],[116,"unicode_normalization::char"]],"d":["External iterator for a string decomposition’s …","The QuickCheck algorithm can quickly determine if a text …","The text may be normalized.","The text is definitely not normalized.","External iterator for a string recomposition’s …","External iterator for replacements for a string’s …","UAX15-D4: This iterator keeps track of how many …","","Methods for iterating over strings while applying Unicode …","The text is definitely normalized.","","","","","","","","","","","Methods for composing and decomposing characters.","A transformation which replaces CJK Compatibility …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","Authoritatively check if a string is in NFC.","Quickly check if a string is in NFC, potentially returning …","Authoritatively check if a string is Stream-Safe NFC.","Quickly check if a string is Stream-Safe NFC.","Authoritatively check if a string is in NFD.","Quickly check if a string is in NFD.","Authoritatively check if a string is Stream-Safe NFD.","Quickly check if a string is Stream-Safe NFD.","Authoritatively check if a string is in NFKC.","Quickly check if a string is in NFKC.","Authoritatively check if a string is in NFKD.","Quickly check if a string is in NFKD.","","","","","An Iterator over the string in Unicode Normalization Form C","","","","","Returns an iterator over the string in Unicode …","","","","","An Iterator over the string in Unicode Normalization Form …","","","","","Returns an iterator over the string in Unicode …","","","","","","","An Iterator over the string with Conjoining Grapheme …","","","","","","","","","","","","","","","","","","","","","","","","","","Look up the canonical combining class for a codepoint.","Compose two characters into a single character, if …","Compute canonical Unicode decomposition for character. See …","Compute standard-variation decomposition for character.","Compute canonical or compatible Unicode decomposition for …","Return whether the given character is a combining mark (…","Return whether the given character is assigned (…"],"i":[0,0,5,5,0,0,0,0,0,5,11,3,5,4,1,11,3,5,4,1,0,19,11,3,4,1,3,4,1,3,4,1,5,5,3,5,4,1,11,3,5,4,1,11,3,5,4,1,11,3,4,1,0,0,0,0,0,0,0,0,0,0,0,0,11,3,4,1,19,11,3,4,1,19,11,3,4,1,19,11,3,4,1,19,11,3,4,1,3,1,19,11,3,4,1,3,4,1,3,4,1,11,3,5,4,1,11,3,5,4,1,11,3,5,4,1,0,0,0,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],1],[[],1],[[],1],[[],1],[[],1],[[[3,[2]]],[[3,[2]]]],[[[4,[2]]],[[4,[2]]]],[[[1,[2]]],[[1,[2]]]],[[]],[[]],[[]],[[5,5],6],[[],6],[[[3,[[0,[7,2]]]],8],9],[[5,8],9],[[[4,[[0,[7,2]]]],8],9],[[[1,[[0,[7,2]]]],8],9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[10,6],[7,5],[10,6],[7,5],[10,6],[7,5],[10,6],[7,5],[10,6],[7,5],[10,6],[7,5],[[[11,[7]]],[[13,[12]]]],[[[3,[7]]],[[13,[12]]]],[[[4,[7]]],[[13,[12]]]],[[[1,[7]]],[[13,[12]]]],[[],4],[[],4],[[],4],[[],4],[[],4],[[],3],[[],3],[[],3],[[],3],[[],3],[[],4],[[],4],[[],4],[[],4],[[],4],[[],3],[[],3],[[],3],[[],3],[[],3],[[[3,[7]]]],[[[1,[7]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[]],[[]],[[]],[[],14],[[],14],[[],14],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[12,17],[[12,12],[[13,[12]]]],[[12,18]],[[12,18]],[[12,18]],[12,6],[12,6]],"c":[],"p":[[3,"Replacements"],[8,"Clone"],[3,"Decompositions"],[3,"Recompositions"],[4,"IsNormalized"],[15,"bool"],[8,"Iterator"],[3,"Formatter"],[6,"Result"],[15,"str"],[3,"StreamSafe"],[15,"char"],[4,"Option"],[3,"String"],[4,"Result"],[3,"TypeId"],[15,"u8"],[8,"FnMut"],[8,"UnicodeNormalization"]]},\
"url":{"doc":"rust-url is an implementation of the URL Standard for the …","t":"NNNNNNNNNNNNNNNNNNNNNGNNNENNNNNNNNNNDENEDDNENNNENNNDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL","n":["AfterFragment","AfterHost","AfterPassword","AfterPath","AfterPort","AfterQuery","AfterScheme","AfterUsername","Backslash","BeforeFragment","BeforeHost","BeforePassword","BeforePath","BeforePort","BeforeQuery","BeforeScheme","BeforeUsername","C0SpaceIgnored","Domain","EmbeddedCredentials","EmptyHost","EncodingOverride","ExpectedDoubleSlash","ExpectedFileDoubleSlash","FileWithHostAndWindowsDrive","Host","IdnaError","InvalidDomainCharacter","InvalidIpv4Address","InvalidIpv6Address","InvalidPort","Ipv4","Ipv6","NonUrlCodePoint","NullInFragment","Opaque","OpaqueOrigin","Origin","Overflow","ParseError","ParseOptions","PathSegmentsMut","PercentDecode","Position","RelativeUrlWithCannotBeABaseBase","RelativeUrlWithoutBase","SetHostOnCannotBeABaseUrl","SyntaxViolation","TabOrNewlineIgnored","Tuple","UnencodedAtSign","Url","UrlQuery","as_mut_string","as_ref","as_str","ascii_serialization","authority","base_url","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cannot_be_a_base","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","description","domain","drop","drop","encoding_override","eq","eq","eq","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","extend","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","form_urlencoded","fragment","from","from","from","from","from","from","from","from","from","from","from","from_directory_path","from_file_path","from_str","has_authority","has_host","hash","hash","hash","hash","host","host_str","index","index","index","index","into","into","into","into","into","into","into","into","into","into","into_string","is_special","is_tuple","join","make_relative","new_opaque","options","origin","parse","parse","parse","parse_opaque","parse_with_params","partial_cmp","partial_cmp","password","path","path_segments","path_segments_mut","pop","pop_if_empty","port","port_or_known_default","provide","push","query","query_pairs","query_pairs_mut","scheme","set_fragment","set_host","set_ip_host","set_password","set_path","set_port","set_query","set_scheme","set_username","socket_addrs","syntax_violation_callback","to_file_path","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unicode_serialization","username"],"q":[[0,"url"]],"d":["","","","","","","","","","","","","","","","","","","A DNS domain name, as ‘.’ dot-separated labels. …","","","","","","","The host name of an URL.","","","","","","An IPv4 address. <code>Url::host_str</code> returns the serialization …","An IPv6 address. <code>Url::host_str</code> returns the serialization …","","","A globally unique identifier","Opaque identifier for URLs that have file or other schemes","The origin of an URL","","Errors that can occur during parsing.","Full configuration for the URL parser.","Exposes methods to manipulate the path of an URL that is …","","Indicates a position within a URL based on its components.","","","","Non-fatal syntax violations that can occur during parsing.","","Consists of the URL’s scheme, host and port","","A parsed URL record.","Implementation detail of <code>Url::query_pairs_mut</code>. Typically …","","","Return the serialization of this URL.","…","Return the authority of this URL as an ASCII string.","Change the base URL","","","","","","","","","","","","","","","","","","","","","Return whether this URL is a cannot-be-a-base URL, meaning …","Remove all segments in the path, leaving the minimal …","","","","","","","","","","","","","","","","","","","","If this URL has a host and it is a domain name (not an IP …","","","Override the character encoding of query strings. This is …","","","","","","","","","","","","","Append each segment from the given iterator at the end of …","","","","","","","","","","","","","","","","Return this URL’s fragment identifier, if any.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Convert a directory name as <code>std::path::Path</code> into an URL in …","Convert a file name as <code>std::path::Path</code> into an URL in the …","","Return whether the URL has an ‘authority’, which can …","Equivalent to <code>url.host().is_some()</code>.","","","","","Return the parsed representation of the host for this URL. …","Return the string representation of the host (domain or IP …","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Return the serialization of this URL.","Return whether the URL is special (has a special scheme)","Return whether this origin is a (scheme, host, port) tuple …","Parse a string as an URL, with this URL as the base URL.","Creates a relative URL if possible, with this URL as the …","Creates a new opaque origin that is only equal to itself.","Return a default <code>ParseOptions</code> that can fully configure the …","Return the origin of this URL (…","Parse a host: either an IPv6 address in [] square …","Parse an absolute URL from a string.","Parse an URL string with the configuration so far.","","Parse an absolute URL from a string and add params to its …","","","Return the password for this URL, if any, as a …","Return the path for this URL, as a percent-encoded ASCII …","Unless this URL is cannot-be-a-base, return an iterator of …","Return an object with methods to manipulate this URL’s …","Remove the last segment of this URL’s path.","Remove the last segment of this URL’s path if it is …","Return the port number for this URL, if any.","Return the port number for this URL, or the default port …","","Append the given segment at the end of this URL’s path.","Return this URL’s query string, if any, as a …","Parse the URL’s query string, if any, as …","Manipulate this URL’s query string, viewed as a sequence …","Return the scheme of this URL, lower-cased, as an ASCII …","Change this URL’s fragment identifier.","Change this URL’s host.","Change this URL’s host to the given IP address.","Change this URL’s password.","Change this URL’s path.","Change this URL’s port number.","Change this URL’s query string.","Change this URL’s scheme.","Change this URL’s username.","Resolve a URL’s host and port number to <code>SocketAddr</code>.","Call the provided function or closure for a non-fatal …","Assuming the URL is in the <code>file</code> scheme or similar, convert …","","Return a copy of <code>self</code> that owns an allocated <code>String</code> but …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","…","Return the username for this URL (typically the empty …"],"i":[15,15,15,15,15,15,15,15,14,15,15,15,15,15,15,15,15,14,11,14,13,0,14,14,14,0,13,13,13,13,13,11,11,14,14,5,0,0,13,0,0,0,14,0,13,13,13,0,14,5,14,0,0,1,3,3,5,3,6,11,5,12,13,14,9,15,3,6,1,11,5,12,13,14,9,15,3,6,1,3,9,11,5,12,13,14,15,3,6,11,5,12,13,14,15,3,6,11,3,14,3,9,1,6,11,5,12,13,14,3,11,5,12,13,14,3,9,1,11,11,5,12,13,13,14,14,9,15,3,3,1,0,3,11,5,12,13,13,14,9,15,3,6,1,3,3,3,3,3,11,5,12,3,3,3,3,3,3,3,11,5,12,13,14,9,15,3,6,1,3,3,5,3,3,5,3,3,11,3,6,11,3,11,3,3,3,3,3,9,9,3,3,13,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,6,3,11,11,5,12,13,14,15,3,6,11,13,14,3,11,5,12,13,14,9,15,3,3,6,1,11,5,12,13,14,9,15,3,6,1,11,5,12,13,14,9,15,3,6,1,5,3],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,2],[3,4],[3,4],[5,2],[3,4],[[6,[7,[3]]],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,8],[9,9],[[[11,[10]]],[[11,[10]]]],[5,5],[12,12],[13,13],[14,14],[15,15],[3,3],[6,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[16]],[11,[16]]],17],[[3,3],17],[14,4],[3,[[7,[4]]]],[9],[1],[[6,18],6],[[[11,[19]],11],8],[[5,5],8],[[12,12],8],[[13,13],8],[[14,14],8],[[3,3],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[],8],[[9,20],9],[1,3],[[[11,[21]],22],23],[[[11,[[24,[4]]]],22],23],[[5,22],23],[[12,22],23],[[13,22],23],[[13,22],23],[[14,22],23],[[14,22],23],[[9,22],23],[[15,22],23],[[3,22],23],[[3,22],23],[[1,22],23],0,[3,[[7,[4]]]],[[]],[[]],[[]],[[]],[25,13],[[]],[[]],[[]],[[]],[[]],[[]],[[[24,[26]]],[[27,[3]]]],[[[24,[26]]],[[27,[3]]]],[4,[[27,[3,13]]]],[3,8],[3,8],[[[11,[28]],29]],[[5,29]],[[12,29]],[[3,29]],[3,[[7,[[11,[4]]]]]],[3,[[7,[4]]]],[[3,[30,[15]]],4],[[3,[31,[15]]],4],[[3,32],4],[[3,[33,[15]]],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[3,2],[3,8],[5,8],[[3,4],[[27,[3,13]]]],[[3,3],[[7,[2]]]],[[],5],[[],6],[3,5],[4,[[27,[[11,[2]],13]]]],[4,[[27,[3,13]]]],[[6,4],[[27,[3,13]]]],[4,[[27,[[11,[2]],13]]]],[[4,20],[[27,[3,13]]]],[[[11,[34]],[11,[34]]],[[7,[17]]]],[[3,3],[[7,[17]]]],[3,[[7,[4]]]],[3,4],[3,[[7,[[36,[35]]]]]],[3,[[27,[9]]]],[9,9],[9,9],[3,[[7,[37]]]],[3,[[7,[37]]]],[38],[[9,4],9],[3,[[7,[4]]]],[3,39],[3,[[40,[1]]]],[3,4],[[3,[7,[4]]]],[[3,[7,[4]]],[[27,[13]]]],[[3,41],27],[[3,[7,[4]]],27],[[3,4]],[[3,[7,[37]]],27],[[3,[7,[4]]]],[[3,4],27],[[3,4],27],[[3,42],[[45,[[44,[43]]]]]],[[6,[7,[42]]],6],[3,[[27,[46]]]],[[]],[[[11,[4]]],[[11,[2]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],2],[[],2],[[],2],[[],2],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[4,[[27,[3]]]],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[[],47],[5,2],[3,4]],"c":[169],"p":[[3,"UrlQuery"],[3,"String"],[3,"Url"],[15,"str"],[4,"Origin"],[3,"ParseOptions"],[4,"Option"],[15,"bool"],[3,"PathSegmentsMut"],[8,"Clone"],[4,"Host"],[3,"OpaqueOrigin"],[4,"ParseError"],[4,"SyntaxViolation"],[4,"Position"],[8,"Ord"],[4,"Ordering"],[6,"EncodingOverride"],[8,"PartialEq"],[8,"IntoIterator"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[8,"AsRef"],[3,"Errors"],[3,"Path"],[4,"Result"],[8,"Hash"],[8,"Hasher"],[3,"Range"],[3,"RangeFrom"],[3,"RangeFull"],[3,"RangeTo"],[8,"PartialOrd"],[15,"char"],[3,"Split"],[15,"u16"],[3,"Demand"],[3,"Parse"],[3,"Serializer"],[4,"IpAddr"],[8,"Fn"],[4,"SocketAddr"],[3,"Vec"],[6,"Result"],[3,"PathBuf"],[3,"TypeId"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
